from collections import deque

goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  

def is_goal(state):
    return state == goal_state

def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def swap(state, i1, j1, i2, j2):
    new_state = [row[:] for row in state]
    new_state[i1][j1], new_state[i2][j2] = new_state[i2][j2], new_state[i1][j1]
    return new_state

def get_neighbors(state):
    neighbors = []
    i, j = find_blank(state)
    
    if i > 0:
        neighbors.append(swap(state, i, j, i - 1, j))
    if i < 2:
        neighbors.append(swap(state, i, j, i + 1, j))
    if j > 0:
        neighbors.append(swap(state, i, j, i, j - 1))
    if j < 2:
        neighbors.append(swap(state, i, j, i, j + 1))
    
    return neighbors

def bfs(start_state):
    queue = deque([(start_state, [])])
    visited = set()
    
    while queue:
        current_state, path = queue.popleft()
        
        state_tuple = tuple(tuple(row) for row in current_state)
        
        if state_tuple in visited:
            continue
        visited.add(state_tuple)
        
        if is_goal(current_state):
            return path
        
        for neighbor in get_neighbors(current_state):
            queue.append((neighbor, path + [neighbor]))
    
    return None

def print_state(state):
    for row in state:
        print(row)
    print()

initial_state = [[1, 2, 3],
                 [4, 0, 6],
                 [7, 5, 8]]

solution = bfs(initial_state)

if solution:
    print("Solution found in", len(solution), "steps:")
    for step in solution:
        print_state(step)
else:
    print("No solution found.")
